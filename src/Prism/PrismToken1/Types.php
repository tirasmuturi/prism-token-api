<?php
namespace Prism\PrismToken1;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TokenIssueFlags {
  const EXTERNAL_CLOCK = 1;
  const TID_ADJUST_BDT = 2;
  const SPECIAL_RESERVED = 4;
  static public $__names = array(
    1 => 'EXTERNAL_CLOCK',
    2 => 'TID_ADJUST_BDT',
    4 => 'SPECIAL_RESERVED',
  );
}

class ApiException extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $eCode = null;
  /**
   * @var string
   */
  public $eMsgEn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'eMsgEn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eCode'])) {
        $this->eCode = $vals['eCode'];
      }
      if (isset($vals['eMsgEn'])) {
        $this->eMsgEn = $vals['eMsgEn'];
      }
    }
  }

  public function getName() {
    return 'ApiException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eMsgEn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApiException');
    if ($this->eCode !== null) {
      $xfer += $output->writeFieldBegin('eCode', TType::STRING, 1);
      $xfer += $output->writeString($this->eCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eMsgEn !== null) {
      $xfer += $output->writeFieldBegin('eMsgEn', TType::STRING, 2);
      $xfer += $output->writeString($this->eMsgEn);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SessionOptions {
  static $_TSPEC;

  /**
   * @var string
   */
  public $version = "1.0";
  /**
   * @var string
   */
  public $culture = "en";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'culture',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['culture'])) {
        $this->culture = $vals['culture'];
      }
    }
  }

  public function getName() {
    return 'SessionOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->culture);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SessionOptions');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 1);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->culture !== null) {
      $xfer += $output->writeFieldBegin('culture', TType::STRING, 10);
      $xfer += $output->writeString($this->culture);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SignInResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $accessToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accessToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accessToken'])) {
        $this->accessToken = $vals['accessToken'];
      }
    }
  }

  public function getName() {
    return 'SignInResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SignInResult');
    if ($this->accessToken !== null) {
      $xfer += $output->writeFieldBegin('accessToken', TType::STRING, 1);
      $xfer += $output->writeString($this->accessToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Alert {
  static $_TSPEC;

  /**
   * @var string
   */
  public $eCode = null;
  /**
   * @var string
   */
  public $eMsgEn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'eMsgEn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eCode'])) {
        $this->eCode = $vals['eCode'];
      }
      if (isset($vals['eMsgEn'])) {
        $this->eMsgEn = $vals['eMsgEn'];
      }
    }
  }

  public function getName() {
    return 'Alert';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eMsgEn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Alert');
    if ($this->eCode !== null) {
      $xfer += $output->writeFieldBegin('eCode', TType::STRING, 1);
      $xfer += $output->writeString($this->eCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eMsgEn !== null) {
      $xfer += $output->writeFieldBegin('eMsgEn', TType::STRING, 2);
      $xfer += $output->writeString($this->eMsgEn);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NodeStatus {
  static $_TSPEC;

  /**
   * @var array
   */
  public $info = null;
  /**
   * @var \Prism\PrismToken1\Alert[]
   */
  public $alerts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'info',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'alerts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Prism\PrismToken1\Alert',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
      if (isset($vals['alerts'])) {
        $this->alerts = $vals['alerts'];
      }
    }
  }

  public function getName() {
    return 'NodeStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->info = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->info[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->alerts = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Prism\PrismToken1\Alert();
              $xfer += $elem12->read($input);
              $this->alerts []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NodeStatus');
    if ($this->info !== null) {
      if (!is_array($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->info));
        {
          foreach ($this->info as $kiter13 => $viter14)
          {
            $xfer += $output->writeString($kiter13);
            $xfer += $output->writeString($viter14);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alerts !== null) {
      if (!is_array($this->alerts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('alerts', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->alerts));
        {
          foreach ($this->alerts as $iter15)
          {
            $xfer += $iter15->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MeterConfigAmendment {
  static $_TSPEC;

  /**
   * @var int
   */
  public $toSgc = null;
  /**
   * @var int
   */
  public $toKrn = null;
  /**
   * @var int
   */
  public $toTi = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'toSgc',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'toKrn',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'toTi',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['toSgc'])) {
        $this->toSgc = $vals['toSgc'];
      }
      if (isset($vals['toKrn'])) {
        $this->toKrn = $vals['toKrn'];
      }
      if (isset($vals['toTi'])) {
        $this->toTi = $vals['toTi'];
      }
    }
  }

  public function getName() {
    return 'MeterConfigAmendment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toSgc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->toKrn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->toTi);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MeterConfigAmendment');
    if ($this->toSgc !== null) {
      $xfer += $output->writeFieldBegin('toSgc', TType::I32, 1);
      $xfer += $output->writeI32($this->toSgc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toKrn !== null) {
      $xfer += $output->writeFieldBegin('toKrn', TType::I16, 2);
      $xfer += $output->writeI16($this->toKrn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toTi !== null) {
      $xfer += $output->writeFieldBegin('toTi', TType::I16, 3);
      $xfer += $output->writeI16($this->toTi);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MeterConfigIn {
  static $_TSPEC;

  /**
   * @var string
   */
  public $drn = null;
  /**
   * @var int
   */
  public $ea = null;
  /**
   * @var int
   */
  public $tct = null;
  /**
   * @var int
   */
  public $sgc = null;
  /**
   * @var int
   */
  public $krn = null;
  /**
   * @var int
   */
  public $ti = null;
  /**
   * @var \Prism\PrismToken1\MeterConfigAmendment
   */
  public $newConfig = null;
  /**
   * @var bool
   */
  public $allowKrnUpdate = true;
  /**
   * @var int
   */
  public $ken = null;
  /**
   * @var string
   */
  public $doe = "0000";
  /**
   * @var bool
   */
  public $allow3Kct = false;
  /**
   * @var bool
   */
  public $allowKenUpdate = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'drn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ea',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'tct',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'sgc',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'krn',
          'type' => TType::I16,
          ),
        12 => array(
          'var' => 'ti',
          'type' => TType::I16,
          ),
        20 => array(
          'var' => 'newConfig',
          'type' => TType::STRUCT,
          'class' => '\Prism\PrismToken1\MeterConfigAmendment',
          ),
        21 => array(
          'var' => 'allowKrnUpdate',
          'type' => TType::BOOL,
          ),
        30 => array(
          'var' => 'ken',
          'type' => TType::I16,
          ),
        31 => array(
          'var' => 'doe',
          'type' => TType::STRING,
          ),
        32 => array(
          'var' => 'allow3Kct',
          'type' => TType::BOOL,
          ),
        33 => array(
          'var' => 'allowKenUpdate',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['drn'])) {
        $this->drn = $vals['drn'];
      }
      if (isset($vals['ea'])) {
        $this->ea = $vals['ea'];
      }
      if (isset($vals['tct'])) {
        $this->tct = $vals['tct'];
      }
      if (isset($vals['sgc'])) {
        $this->sgc = $vals['sgc'];
      }
      if (isset($vals['krn'])) {
        $this->krn = $vals['krn'];
      }
      if (isset($vals['ti'])) {
        $this->ti = $vals['ti'];
      }
      if (isset($vals['newConfig'])) {
        $this->newConfig = $vals['newConfig'];
      }
      if (isset($vals['allowKrnUpdate'])) {
        $this->allowKrnUpdate = $vals['allowKrnUpdate'];
      }
      if (isset($vals['ken'])) {
        $this->ken = $vals['ken'];
      }
      if (isset($vals['doe'])) {
        $this->doe = $vals['doe'];
      }
      if (isset($vals['allow3Kct'])) {
        $this->allow3Kct = $vals['allow3Kct'];
      }
      if (isset($vals['allowKenUpdate'])) {
        $this->allowKenUpdate = $vals['allowKenUpdate'];
      }
    }
  }

  public function getName() {
    return 'MeterConfigIn';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->drn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->tct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sgc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->krn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ti);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->newConfig = new \Prism\PrismToken1\MeterConfigAmendment();
            $xfer += $this->newConfig->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowKrnUpdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->doe);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allow3Kct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowKenUpdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MeterConfigIn');
    if ($this->drn !== null) {
      $xfer += $output->writeFieldBegin('drn', TType::STRING, 1);
      $xfer += $output->writeString($this->drn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ea !== null) {
      $xfer += $output->writeFieldBegin('ea', TType::I16, 2);
      $xfer += $output->writeI16($this->ea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tct !== null) {
      $xfer += $output->writeFieldBegin('tct', TType::I16, 3);
      $xfer += $output->writeI16($this->tct);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sgc !== null) {
      $xfer += $output->writeFieldBegin('sgc', TType::I32, 10);
      $xfer += $output->writeI32($this->sgc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->krn !== null) {
      $xfer += $output->writeFieldBegin('krn', TType::I16, 11);
      $xfer += $output->writeI16($this->krn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ti !== null) {
      $xfer += $output->writeFieldBegin('ti', TType::I16, 12);
      $xfer += $output->writeI16($this->ti);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newConfig !== null) {
      if (!is_object($this->newConfig)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('newConfig', TType::STRUCT, 20);
      $xfer += $this->newConfig->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowKrnUpdate !== null) {
      $xfer += $output->writeFieldBegin('allowKrnUpdate', TType::BOOL, 21);
      $xfer += $output->writeBool($this->allowKrnUpdate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ken !== null) {
      $xfer += $output->writeFieldBegin('ken', TType::I16, 30);
      $xfer += $output->writeI16($this->ken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doe !== null) {
      $xfer += $output->writeFieldBegin('doe', TType::STRING, 31);
      $xfer += $output->writeString($this->doe);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allow3Kct !== null) {
      $xfer += $output->writeFieldBegin('allow3Kct', TType::BOOL, 32);
      $xfer += $output->writeBool($this->allow3Kct);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowKenUpdate !== null) {
      $xfer += $output->writeFieldBegin('allowKenUpdate', TType::BOOL, 33);
      $xfer += $output->writeBool($this->allowKenUpdate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MeterConfigAdvice {
  static $_TSPEC;

  /**
   * @var int
   */
  public $toSgc = null;
  /**
   * @var int
   */
  public $toKrn = null;
  /**
   * @var int
   */
  public $toTi = null;
  /**
   * @var int
   */
  public $toKen = null;
  /**
   * @var string
   */
  public $idRecord = null;
  /**
   * @var string
   */
  public $record2 = null;
  /**
   * @var bool
   */
  public $rollover = null;
  /**
   * @var string
   */
  public $toVkKcv = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'toSgc',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'toKrn',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'toTi',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'toKen',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'idRecord',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'record2',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'rollover',
          'type' => TType::BOOL,
          ),
        21 => array(
          'var' => 'toVkKcv',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['toSgc'])) {
        $this->toSgc = $vals['toSgc'];
      }
      if (isset($vals['toKrn'])) {
        $this->toKrn = $vals['toKrn'];
      }
      if (isset($vals['toTi'])) {
        $this->toTi = $vals['toTi'];
      }
      if (isset($vals['toKen'])) {
        $this->toKen = $vals['toKen'];
      }
      if (isset($vals['idRecord'])) {
        $this->idRecord = $vals['idRecord'];
      }
      if (isset($vals['record2'])) {
        $this->record2 = $vals['record2'];
      }
      if (isset($vals['rollover'])) {
        $this->rollover = $vals['rollover'];
      }
      if (isset($vals['toVkKcv'])) {
        $this->toVkKcv = $vals['toVkKcv'];
      }
    }
  }

  public function getName() {
    return 'MeterConfigAdvice';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toSgc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->toKrn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->toTi);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->toKen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idRecord);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->record2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->rollover);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toVkKcv);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MeterConfigAdvice');
    if ($this->toSgc !== null) {
      $xfer += $output->writeFieldBegin('toSgc', TType::I32, 1);
      $xfer += $output->writeI32($this->toSgc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toKrn !== null) {
      $xfer += $output->writeFieldBegin('toKrn', TType::I16, 2);
      $xfer += $output->writeI16($this->toKrn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toTi !== null) {
      $xfer += $output->writeFieldBegin('toTi', TType::I16, 3);
      $xfer += $output->writeI16($this->toTi);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toKen !== null) {
      $xfer += $output->writeFieldBegin('toKen', TType::I16, 4);
      $xfer += $output->writeI16($this->toKen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idRecord !== null) {
      $xfer += $output->writeFieldBegin('idRecord', TType::STRING, 10);
      $xfer += $output->writeString($this->idRecord);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record2 !== null) {
      $xfer += $output->writeFieldBegin('record2', TType::STRING, 11);
      $xfer += $output->writeString($this->record2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rollover !== null) {
      $xfer += $output->writeFieldBegin('rollover', TType::BOOL, 20);
      $xfer += $output->writeBool($this->rollover);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toVkKcv !== null) {
      $xfer += $output->writeFieldBegin('toVkKcv', TType::STRING, 21);
      $xfer += $output->writeString($this->toVkKcv);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Token {
  static $_TSPEC;

  /**
   * @var string
   */
  public $drn = null;
  /**
   * @var string
   */
  public $pan = null;
  /**
   * @var int
   */
  public $ea = null;
  /**
   * @var int
   */
  public $tct = null;
  /**
   * @var int
   */
  public $sgc = null;
  /**
   * @var int
   */
  public $krn = null;
  /**
   * @var int
   */
  public $ti = null;
  /**
   * @var int
   */
  public $tokenClass = null;
  /**
   * @var int
   */
  public $subclass = null;
  /**
   * @var int
   */
  public $tid = null;
  /**
   * @var double
   */
  public $transferAmount = null;
  /**
   * @var bool
   */
  public $isReservedTid = null;
  /**
   * @var \Prism\PrismToken1\MeterConfigAdvice
   */
  public $newConfig = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $stsUnitName = null;
  /**
   * @var string
   */
  public $scaledAmount = null;
  /**
   * @var string
   */
  public $scaledUnitName = null;
  /**
   * @var string
   */
  public $tokenDec = null;
  /**
   * @var string
   */
  public $tokenHex = null;
  /**
   * @var string
   */
  public $idSm = null;
  /**
   * @var string
   */
  public $vkKcv = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'drn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pan',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ea',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'tct',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'sgc',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'krn',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'ti',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'tokenClass',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'subclass',
          'type' => TType::I16,
          ),
        12 => array(
          'var' => 'tid',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'transferAmount',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'isReservedTid',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'newConfig',
          'type' => TType::STRUCT,
          'class' => '\Prism\PrismToken1\MeterConfigAdvice',
          ),
        20 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'stsUnitName',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'scaledAmount',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'scaledUnitName',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'tokenDec',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'tokenHex',
          'type' => TType::STRING,
          ),
        40 => array(
          'var' => 'idSm',
          'type' => TType::STRING,
          ),
        41 => array(
          'var' => 'vkKcv',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['drn'])) {
        $this->drn = $vals['drn'];
      }
      if (isset($vals['pan'])) {
        $this->pan = $vals['pan'];
      }
      if (isset($vals['ea'])) {
        $this->ea = $vals['ea'];
      }
      if (isset($vals['tct'])) {
        $this->tct = $vals['tct'];
      }
      if (isset($vals['sgc'])) {
        $this->sgc = $vals['sgc'];
      }
      if (isset($vals['krn'])) {
        $this->krn = $vals['krn'];
      }
      if (isset($vals['ti'])) {
        $this->ti = $vals['ti'];
      }
      if (isset($vals['tokenClass'])) {
        $this->tokenClass = $vals['tokenClass'];
      }
      if (isset($vals['subclass'])) {
        $this->subclass = $vals['subclass'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['transferAmount'])) {
        $this->transferAmount = $vals['transferAmount'];
      }
      if (isset($vals['isReservedTid'])) {
        $this->isReservedTid = $vals['isReservedTid'];
      }
      if (isset($vals['newConfig'])) {
        $this->newConfig = $vals['newConfig'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['stsUnitName'])) {
        $this->stsUnitName = $vals['stsUnitName'];
      }
      if (isset($vals['scaledAmount'])) {
        $this->scaledAmount = $vals['scaledAmount'];
      }
      if (isset($vals['scaledUnitName'])) {
        $this->scaledUnitName = $vals['scaledUnitName'];
      }
      if (isset($vals['tokenDec'])) {
        $this->tokenDec = $vals['tokenDec'];
      }
      if (isset($vals['tokenHex'])) {
        $this->tokenHex = $vals['tokenHex'];
      }
      if (isset($vals['idSm'])) {
        $this->idSm = $vals['idSm'];
      }
      if (isset($vals['vkKcv'])) {
        $this->vkKcv = $vals['vkKcv'];
      }
    }
  }

  public function getName() {
    return 'Token';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->drn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pan);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->tct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sgc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->krn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ti);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->tokenClass);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->subclass);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->transferAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isReservedTid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRUCT) {
            $this->newConfig = new \Prism\PrismToken1\MeterConfigAdvice();
            $xfer += $this->newConfig->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stsUnitName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scaledAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scaledUnitName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenDec);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenHex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idSm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vkKcv);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Token');
    if ($this->drn !== null) {
      $xfer += $output->writeFieldBegin('drn', TType::STRING, 1);
      $xfer += $output->writeString($this->drn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pan !== null) {
      $xfer += $output->writeFieldBegin('pan', TType::STRING, 2);
      $xfer += $output->writeString($this->pan);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ea !== null) {
      $xfer += $output->writeFieldBegin('ea', TType::I16, 3);
      $xfer += $output->writeI16($this->ea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tct !== null) {
      $xfer += $output->writeFieldBegin('tct', TType::I16, 4);
      $xfer += $output->writeI16($this->tct);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sgc !== null) {
      $xfer += $output->writeFieldBegin('sgc', TType::I32, 5);
      $xfer += $output->writeI32($this->sgc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->krn !== null) {
      $xfer += $output->writeFieldBegin('krn', TType::I16, 6);
      $xfer += $output->writeI16($this->krn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ti !== null) {
      $xfer += $output->writeFieldBegin('ti', TType::I16, 7);
      $xfer += $output->writeI16($this->ti);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokenClass !== null) {
      $xfer += $output->writeFieldBegin('tokenClass', TType::I16, 10);
      $xfer += $output->writeI16($this->tokenClass);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subclass !== null) {
      $xfer += $output->writeFieldBegin('subclass', TType::I16, 11);
      $xfer += $output->writeI16($this->subclass);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::I32, 12);
      $xfer += $output->writeI32($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transferAmount !== null) {
      $xfer += $output->writeFieldBegin('transferAmount', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->transferAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isReservedTid !== null) {
      $xfer += $output->writeFieldBegin('isReservedTid', TType::BOOL, 14);
      $xfer += $output->writeBool($this->isReservedTid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newConfig !== null) {
      if (!is_object($this->newConfig)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('newConfig', TType::STRUCT, 15);
      $xfer += $this->newConfig->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 20);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stsUnitName !== null) {
      $xfer += $output->writeFieldBegin('stsUnitName', TType::STRING, 21);
      $xfer += $output->writeString($this->stsUnitName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scaledAmount !== null) {
      $xfer += $output->writeFieldBegin('scaledAmount', TType::STRING, 22);
      $xfer += $output->writeString($this->scaledAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scaledUnitName !== null) {
      $xfer += $output->writeFieldBegin('scaledUnitName', TType::STRING, 23);
      $xfer += $output->writeString($this->scaledUnitName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokenDec !== null) {
      $xfer += $output->writeFieldBegin('tokenDec', TType::STRING, 30);
      $xfer += $output->writeString($this->tokenDec);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokenHex !== null) {
      $xfer += $output->writeFieldBegin('tokenHex', TType::STRING, 31);
      $xfer += $output->writeString($this->tokenHex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idSm !== null) {
      $xfer += $output->writeFieldBegin('idSm', TType::STRING, 40);
      $xfer += $output->writeString($this->idSm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vkKcv !== null) {
      $xfer += $output->writeFieldBegin('vkKcv', TType::STRING, 41);
      $xfer += $output->writeString($this->vkKcv);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MeterTestToken {
  static $_TSPEC;

  /**
   * @var string
   */
  public $drn = null;
  /**
   * @var string
   */
  public $pan = null;
  /**
   * @var int
   */
  public $tokenClass = null;
  /**
   * @var int
   */
  public $subclass = null;
  /**
   * @var int
   */
  public $control = null;
  /**
   * @var int
   */
  public $mfrcode = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $tokenDec = null;
  /**
   * @var string
   */
  public $tokenHex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'drn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pan',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'tokenClass',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'subclass',
          'type' => TType::I16,
          ),
        12 => array(
          'var' => 'control',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'mfrcode',
          'type' => TType::I16,
          ),
        20 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'tokenDec',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'tokenHex',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['drn'])) {
        $this->drn = $vals['drn'];
      }
      if (isset($vals['pan'])) {
        $this->pan = $vals['pan'];
      }
      if (isset($vals['tokenClass'])) {
        $this->tokenClass = $vals['tokenClass'];
      }
      if (isset($vals['subclass'])) {
        $this->subclass = $vals['subclass'];
      }
      if (isset($vals['control'])) {
        $this->control = $vals['control'];
      }
      if (isset($vals['mfrcode'])) {
        $this->mfrcode = $vals['mfrcode'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['tokenDec'])) {
        $this->tokenDec = $vals['tokenDec'];
      }
      if (isset($vals['tokenHex'])) {
        $this->tokenHex = $vals['tokenHex'];
      }
    }
  }

  public function getName() {
    return 'MeterTestToken';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->drn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pan);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->tokenClass);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->subclass);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->control);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->mfrcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenDec);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenHex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MeterTestToken');
    if ($this->drn !== null) {
      $xfer += $output->writeFieldBegin('drn', TType::STRING, 1);
      $xfer += $output->writeString($this->drn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pan !== null) {
      $xfer += $output->writeFieldBegin('pan', TType::STRING, 2);
      $xfer += $output->writeString($this->pan);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokenClass !== null) {
      $xfer += $output->writeFieldBegin('tokenClass', TType::I16, 10);
      $xfer += $output->writeI16($this->tokenClass);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subclass !== null) {
      $xfer += $output->writeFieldBegin('subclass', TType::I16, 11);
      $xfer += $output->writeI16($this->subclass);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->control !== null) {
      $xfer += $output->writeFieldBegin('control', TType::I64, 12);
      $xfer += $output->writeI64($this->control);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mfrcode !== null) {
      $xfer += $output->writeFieldBegin('mfrcode', TType::I16, 13);
      $xfer += $output->writeI16($this->mfrcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 20);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokenDec !== null) {
      $xfer += $output->writeFieldBegin('tokenDec', TType::STRING, 30);
      $xfer += $output->writeString($this->tokenDec);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokenHex !== null) {
      $xfer += $output->writeFieldBegin('tokenHex', TType::STRING, 31);
      $xfer += $output->writeString($this->tokenHex);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VerifyResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $validationResult = null;
  /**
   * @var \Prism\PrismToken1\Token
   */
  public $token = null;
  /**
   * @var \Prism\PrismToken1\MeterTestToken
   */
  public $meterTestToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'validationResult',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\Prism\PrismToken1\Token',
          ),
        3 => array(
          'var' => 'meterTestToken',
          'type' => TType::STRUCT,
          'class' => '\Prism\PrismToken1\MeterTestToken',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['validationResult'])) {
        $this->validationResult = $vals['validationResult'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['meterTestToken'])) {
        $this->meterTestToken = $vals['meterTestToken'];
      }
    }
  }

  public function getName() {
    return 'VerifyResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->validationResult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token = new \Prism\PrismToken1\Token();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->meterTestToken = new \Prism\PrismToken1\MeterTestToken();
            $xfer += $this->meterTestToken->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VerifyResult');
    if ($this->validationResult !== null) {
      $xfer += $output->writeFieldBegin('validationResult', TType::STRING, 1);
      $xfer += $output->writeString($this->validationResult);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 2);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->meterTestToken !== null) {
      if (!is_object($this->meterTestToken)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('meterTestToken', TType::STRUCT, 3);
      $xfer += $this->meterTestToken->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $ApiVersion;
  static protected $PrintableAsciiRe;
  static protected $IdentMatchRe;
  static protected $ApiErrors;

  static protected function init_ApiVersion() {
    return "1.0";
  }

  static protected function init_PrintableAsciiRe() {
    return "^[\\x20-\\x7e]*\$";
  }

  static protected function init_IdentMatchRe() {
    return "^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.,]{0,39}\$";
  }

  static protected function init_ApiErrors() {
    return array(
      "EService" => "Unhandled exception '{0}': {1}",
      "EAuthentication.Token" => "Authentication failed (bad accessToken: {0})",
      "EAuthentication.Permission" => "Access denied: accessToken does not have permission '{0}'",
      "EParamRange" => "Parameter '{0}' out of range: got '{1}', expected {2}",
      "ESts.DrnOrPan" => "Parameter '{0}' is an invalid meter DRN/PAN (reason: {2}); got '{1}'",
      "ESts.DrnOrPan.CheckDigit" => "Parameter '{0}' is a meter DRN/PAN with bad check digit(s); got '{1}'",
      "ESignin.Version" => "This service (API version={0}) does not support your client's API version='{1}'",
      "ESignin.Realm" => "Sign-in failed: unknown realm='{0}'",
      "ESignin.Subject" => "Sign-in failed: unknown username='{1}' in realm='{0}'",
      "ESignin.Authentication" => "Sign-in failed: authentication failed for realm='{0}' username='{1}'",
      "ESignin.Permission" => "Sign-in failed: realm='{0}' username='{1}' does not have permission '{2}'",
      "ESts.IdRecord" => "Parameter '{0}' is an invalid IDRecord/Record2 (reason: {2}); got '{1}'",
      "ESts.IdRecord.Expired" => "Meter identification has expired (MMYY='{0}')",
      "ESm" => "Security Module error '{0}': {1}",
      "EKeystore.NotFound" => "Vending Key not available for SGC={0},KRN={1} (reason: {2})",
      "ECacheMiss" => "The requested entry was not found in the cache",
      "EPrefRange" => "Preference '{0}' out of range: got '{1}', expected {2}",
      "ESts.VkExpired" => "Vending Key has expired (TokenID exceeds KeyExpiryNumber)",
      "ESts.VkBeforeBdt" => "Attempt to use Vending Key before its Base Date",
      "EVerify.Ok" => "(Not an error) Token is valid",
      "EVerify.Crc" => "Invalid token: CRC error",
      "EVerify.DdtkCredit" => "Invalid token: Class 0 token encrypted under a DDTK",
      "EVerify.KeyExpired" => "Invalid token: TokenID out of range for Vending Key KeyExpiryNumber",
    );
  }
}


